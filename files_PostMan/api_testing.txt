Date : 13/04/2025
--------------------------------------------------------------------
API Testing :
Video : https://www.youtube.com/playlist?list=PLUDwpEzHYYLs3DYFqm79fIj2QOzPke_fW
Link : https://reqres.in/
---
Postman
Create Workspace
Create Collection

http requests:
1. get : retrieve the record/s
2. post : Create the record/s
3. put/patch : complete record is updated/partial record is updated
4. delete : delete the record/s
---
Put
https://reqres.in/api/users/23

body
raw
json
{
    "name": "sdbuser",
    "job": "API Tester"
}
---
Creating own API requires
1. nodejs/npm
node --version
npm --version
2. json-server
run the cmd :
npm install -g json-server
---
students.json : 
{
"students":[
  {
    "id": "1",
    "Name": "Senpai",
    "location" : "India",
    "Phone" : "1234567899",
    "Courses" : [
      "Java",
      "Selenium"
    ]
  },
  {
    "id": "2",
    "Name": "Sachin Bhosale",
    "location" : "India",
    "Phone" : "9503103805",
    "Courses" : [
      "Java",
      "Selenium"
    ]
  }
]
}
---
json-server students.json

---
pm.test("Status code is 200",()=>{
	pm.response.to.have.status(200);
});
---
pm.test("Status code is 404 | 404 Not Found",()=>{
	pm.response.to.have.status(404);
});
---
pm.test("Successful GET request",()=>{
	pm.expect(pm.response.code).to.be.oneOf([200,201]);
});
---
pm.test("Status Code name has string",()=>{
	pm.response.to.have.status("Created");
});
---
json - java script object notation
data is stored in key:value pair
key is always written in " " double quotes
---
https://jsonpathfinder.com/
https://jsonpath.com/
---
Response Validations:
Status code
Headers
Cookies
Response time
Response body
---
We need to add assertions - validation
pm - library
functions - java script

User defined functions
Normal function
Arrow function

Chai assertion library

pm.test("Test Name",function()
	{	
	//assertion;	
	}
);

pm.test("Test Name", () =>
	{
	//assertion;
	}
);
---
Testing headers
Check that a response header is present:
pm.test("Content-type header is application/json", () =>
	{
	pm.response.to.have.header("Content-Type");
	}
);
---
Check that a response header exact value:
pm.test("Content-type header is application/json", () =>
	{
	pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');
	}
);
---
Testing Cookies
Test if a cookie is present in the response:
pm.test("Cookie 'language' is present",()=> {
	pm.expect(pm.cookies.has('language')).to.be.true;
});
---
test for a perticular cookie value:
pm.test("Cookie language has value 1", () => {
	pm.expect(pm.cookies.get('language')).to.eql('gn-gb');
});
---
Testing response times
pm.test("Response time is less than 200ms", () => {
	pm.expect(pm.response.responseTime).to.be.below(200);
});
---
Test the type of any part of the response:
const jsonData = pm.response.json();
pm.test("Test data type of the response", () => {
	pm.expect(jsonData).to.be.an("object");
	pm.expect(jsonData.name).to.be.a("string");
	pm.expect(jsonData.id).to.be.a("number");
	pm.expect(jsonData.courses).to.be.an("array");
});
---
Asserting array properties
Check if an array is empty and if it contains particular items:
pm.test("test array properties", () => {
	//courses includes "java"
	pm.expect(jsonData.Courses).to.be.include("Java");

	//courses array must include all listed
	pm.expect(jsonData.Courses).to.be.members(["Java","Selenium");

});
---
//Validating json fileds in response:
pm.test("Values of entire record with id 1", ()=> {
    //var jsonData = pm.response.json();
	pm.expect(jsonData.id).to.be.eql("1");
	pm.expect(jsonData.Name).to.be.eql("Tanmay Bhosale");
	pm.expect(jsonData.location).to.be.eql("India");
	pm.expect(jsonData.Phone).to.be.eql("1234567899");
	pm.expect(jsonData.Courses[0]).to.be.eql("Java");
	pm.expect(jsonData.Courses[1]).to.be.eql("Selenium");
});
---
json schema : {https://www.liquid-technologies.com/online-json-to-schema-converter}

Response :
{
    "id": "1",
    "Name": "Tanmay Bhosale",
    "location": "India",
    "Phone": "1234567899",
    "Courses": [
        "Java",
        "Selenium"
    ]
}

json schema :
var schema=
{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "id": {
      "type": "string"
    },
    "Name": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "Phone": {
      "type": "string"
    },
    "Courses": {
      "type": "array",
      "items": [
        {
          "type": "string"
        },
        {
          "type": "string"
        }
      ]
    }
  },
  "required": [
    "id",
    "Name",
    "location",
    "Phone",
    "Courses"
  ]
}
---
json schema valiation:
pm.test("Schema is valid", function(){
	pm.expect(tv4.validate(jsonData,schema)).to.be.true;
});
---
Session 5 <-
pre-requestScript -> Request -> Response -> Tests
pre-requestScript can be written for
Collection level
Folder level
request level
---
Collection level
pre-request script

console.log("Pre-requestScript at Collection Level");

console.log("Pre-requestScript at folder Level");

console.log("Pre-requestScript at request Level");

console.log("TestsScript at collection Level");
console.log("TestsScript at folder Level");
console.log("TestsScript at request Level");
---
Scope of Varaibles in Postman
ex. comman url (hostname) can be stored in variables
Global variables -> Accessible in workspace
collection variables -> Accessible in collection
environment variables -> accessible in all collections, but we need to switch to particular environment
local variables -> create and access at request level only
data variables -> external files csv/text...
---
url_global
url_collect
url_qa_env
url_dev_env
url_prod_env
---
Syntax - {{variable_name}}
---
creating variable using pre-request script:
All local veriable are created in pre-request script section
pm.variables.set("url_local","http://localhost:3000/students");

//Global variable
pm.globals.set("userid_global","2");

//environment variable
pm.environment.set("userid_qa_env","2");

//collection veriable
pm.collectionVariables.set("userid_collect","2");
---
unsetting of variables can be done with tests section after executing request
pm.globals.unset("userid_global");
pm.environment.unset("userid_qa_env");
pm.collection.unset("userid_collect");
---
In Tests section, we can write code to display variable values in console of postman
console.log(pm.globals.get("userid_global"));
console.log(pm.environment.get("userid_qa_env"));
console.log(pm.collectionVariables.get("userid_collect"));
console.log(pm.variables.get("url_local"));
--------------------------------------------------------------------
Session 6 <-

--------------------------------------------------------------------
Database Testing :
https://www.youtube.com/playlist?list=PLUDwpEzHYYLtmxThtmsBxocKuicJOddGj